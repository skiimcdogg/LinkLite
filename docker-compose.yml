version: '3'

services:
  backend:
    build:
      context: ./LinkLite-server
    env_file:
      - ./LinkLite-server/link_lite/.env
    expose:
      - "8000"
    command: >
        sh -c "./wait_for_db.sh python /app/link_lite/manage.py migrate 
        && python /app/link_lite/manage.py runserver 0.0.0.0:8000"
    networks:
      - linklite_network
    depends_on:
      - db

  frontend:
    build:
      context: ./LinkLite-client
    env_file:
      - ./LinkLite-client/.env
    networks:
      - linklite_network
    command: ["echo", "Frontend built. Nginx will serve the assets."]

  nginx:
    image: nginx
    ports:
      - "80:80"    # HTTP
      - "443:443"  # HTTPS
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf  # Fichier principal de Nginx
      - ./conf.d:/etc/nginx/conf.d  # Configuration du serveur
      - ./data/certbot/conf:/etc/letsencrypt  # Certificats générés par Certbot
      - ./data/certbot/www:/var/www/certbot  # Emplacement pour les challenges Certbot
      - ./LinkLite-client/build:/usr/share/nginx/html  # Fichiers buildés du frontend
    networks:
      - linklite_network
    depends_on:
      - backend
      - frontend

  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: /bin/sh -c 'trap exit TERM; while :; do certbot certonly --webroot -w /var/www/certbot -d link-lite.antoinestouff.fr --email antoine.stouff78500@gmail.com --agree-tos --noninteractive; sleep 12h; done'
    depends_on:
      - nginx
    networks:
      - linklite_network

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - linklite_network

networks:
  linklite_network:
    driver: bridge

volumes:
  db_data:
