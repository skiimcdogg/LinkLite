version: '3'

services:
  backend:
    build:
      context: ./LinkLite-server
    env_file:
      - ./LinkLite-server/link_lite/.env
    expose:
      - "8000"
    command: >
        sh -c "./wait_for_db.sh python /app/link_lite/manage.py migrate 
        && python /app/link_lite/manage.py runserver 0.0.0.0:8000"
    networks:
      - linklite_network
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  frontend:
    build:
      context: ./LinkLite-client
    env_file:
      - ./LinkLite-client/.env
    networks:
      - linklite_network
    command: ["echo", "Frontend built. Nginx will serve the assets."]
  
  nginx:
    build: 
      context: .
      dockerfile: Dockerfile.nginx
    ports:
      - "80:80"    # HTTP
      - "443:443"  # HTTPS
    volumes:
      - ./LinkLite-client/nginx.conf:/etc/nginx/nginx.conf  # Configuration Nginx
      - ./data/certbot/conf:/etc/letsencrypt  # Certificats générés par Certbot
      - ./data/certbot/www:/var/www/certbot  # Emplacement pour les challenges Certbot
      - ./LinkLite-client/build:/usr/share/nginx/html  # Fichiers buildés du frontend
      - ./wait_for_backend.sh:/wait_for_backend.sh
    networks:
      - linklite_network
    depends_on:
      - backend:
        condition: service_healthy
      - frontend
    entrypoint: ["/bin/sh", "-c", "chmod +x /wait_for_backend.sh && /wait_for_backend.sh"]

  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: /bin/sh -c 'trap exit TERM; while :; do certbot certonly --webroot -w /var/www/certbot -d link-lite.antoinestouff.fr --email antoine.stouff78500@gmail.com --agree-tos --noninteractive; sleep 12h; done'
    networks:
      - linklite_network

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - linklite_network

networks:
  linklite_network:
    driver: bridge

volumes:
  db_data:
